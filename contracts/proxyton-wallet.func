;; pTON Wallet Smart Contract
;; It mimics sending of TONs as jetton transfer:
;; when it receives transfer notification it calculates receiver pTON wallet
;; and sends there internal_transfer amount of jettons is equal to amount of
;; accepted TONs minus fee
;; In turn when pTON wallet receives internal_transfer it generates transfer_notification
;; note that amount of "transferred" jettons will correspond to TON amount
;; not to amount of jettons in internal_transfer.
;; pTON also checks forward_payload: if it contains only number 8388449 encoded in 23 bits
;; it treats it as special request to "unwrap tokens" and send them directly to owner
;; This number is used since usually 32bit ops are used and collisions are not expected.

;; From jetton/minter point of view each wallet is able to mint jettons for itself.

#include "imports/stdlib.fc";
#include "./jetton-utils.func";
#include "./error-codes.func";
#include "./op-codes.func";
#include "./messages.func";
#include "./params.func";

;; it is expected that gas cost will never be higher than that
;; TODO revisit
const int fee::gas_consumption = 10000000;
const int min_tons_for_storage = 10000000;
const special::unwrap_op_value = 8388449;
const special::unwrap_op_length = 23;


{-
  Storage
  storage#_ owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
-}

(slice, slice, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
}


(int, slice, slice, cell) get_wallet_data() method_id {
  (slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
  return (pair_first(get_balance()), owner_address, jetton_master_address, jetton_wallet_code);
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
-}

() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  slice to_owner_address = in_msg_body~load_msg_addr();
  force_chain(to_owner_address);
  (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = get_wallet_data();

  slice response_address = in_msg_body~load_msg_addr();
  cell custom_payload = in_msg_body~load_dict();
  int forward_ton_amount = in_msg_body~load_coins();
  slice forward_payload = in_msg_body;
  throw_unless(error::not_enough_tons, msg_value > fee::gas_consumption);

  if (equal_slice_bits(owner_address, sender_address)) {
    var msg_body = null();

    if(forward_ton_amount) {
      throw_unless(error::not_enough_tons, msg_value > fwd_fee + forward_ton_amount + fee::gas_consumption);

      msg_body = begin_cell()
          .store_op(op::transfer_notification)
          .store_query_id(query_id)
          .store_coins(jetton_amount)
          .store_slice(sender_address)
          .store_slice(forward_payload)
          .end_cell();

      var msg = begin_cell()
              .store_msg_flag(msg_flag::non_bounceable)
              .store_slice(to_owner_address)
              .store_coins(jetton_amount + forward_ton_amount)
              .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_ref(msg_body);

      send_raw_message(msg.end_cell(), 1);

    } else {
      var msg = begin_cell()
              .store_msg_flag(msg_flag::non_bounceable)
              .store_slice(to_owner_address)
              .store_coins(jetton_amount)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
      send_raw_message(msg.end_cell(), 1);
    }

    if ((response_address.preload_uint(2) != 0)) {
      var msg = begin_cell()
      .store_msg_flag(msg_flag::non_bounceable)
      .store_slice(response_address)
      .store_coins(0)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_op(op::excesses)
      .store_query_id(query_id);
      send_raw_message(msg.end_cell(), 64);
    }

  } else {
    if (forward_ton_amount + jetton_amount != msg_value) {
      var msg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable)
        .store_slice(sender_address)
        .store_coins(msg_value)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_op(op::excesses)
        .store_query_id(query_id);

      send_raw_message(msg.end_cell(), IGNORE_ERRORS);
      return ();
    }

    var msg_body = begin_cell()
          .store_op(op::transfer_notification)
          .store_query_id(query_id)
          .store_coins(jetton_amount)
          .store_slice(sender_address)
          .store_slice(forward_payload)
          .end_cell();

    var msg = begin_cell()
        .store_msg_flag(msg_flag::non_bounceable)
        .store_slice(to_owner_address)
        .store_coins(forward_ton_amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY);
  }

  return ();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    return ();
  }

  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_op();

  if (op == op::transfer) {
    send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  throw(error::unknown_op);
}